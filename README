This zip file contains the following contents
1. AtomBUCDriver.dll - The Driver Library
2. driverRunner.exe  - The runner for demonstrating the library
3. BUCEmulator       - The emulator that mimics a simple BUC with limited logic 

One can run the driverRunner.exe to run a quick test of the library

The source code, in the form of visual studio projects, are in the folder of the same name


The Driver contains the following functions

/// <summary>
/// Opens a serial Port
/// </summary>
/// <returns>
/// Void
/// </returns>
public void OpenSerialPort()


/// <summary>
/// Closes a serial Port
/// </summary>
/// <returns>
/// Void
/// </returns>
public void CloseSerialPort()


/// <summary>
/// Gets the temperature of a module in Celsius accroding to the id provided
/// </summary>
/// <param name="_id">uint8 - ID of the module</param>
/// <returns>
/// int - The temperature of the module in Celsius
/// </returns>
public int GetTemperature(byte _id)


/// <summary>
/// Gets the temperature of all 5 modules in Celsius
/// </summary>
/// <returns>
/// int[] - The temperature of all modules in Celsius as int array
/// </returns>
public int[] GetTemperature()


/// <summary>
/// Gets all of the fault status
/// </summary>
/// <returns>
/// bool[] - MuteFault, OverTemperatureFault, PLLFault in that order as bool array
/// </returns>
public bool[] GetAllFaults()


/// <summary>
/// Gets RF forward power in dBm
/// </summary>
/// <returns>
/// double - The RF forward power in dBm as double
/// </returns>
public double GetRFForwardPower()


/// <summary>
/// Gets serial number of device as string
/// </summary>
/// <returns>
/// String - The serial number of device as string
/// </returns>
public String GetSerialNumber()


/// <summary>
/// Gets Synthesizer Attenuation in dB
/// </summary>
/// <returns>
/// double - The Synthesizer Attenuation in dB
/// </returns>
public double GetSynthAttenuation()


/// <summary>
/// Sets Synthesizer Attenuation
/// </summary>
/// <param name="_synthValue">uint16 - The DAT value that represents the attenuation. Valid values range from 0 to 63.</param>
/// <returns>
/// Void
/// </returns>
public void SetSynthAttenuation(ushort _synthValue)


/// <summary>
/// Mutes the BUC
/// </summary>
/// <returns>
/// Void
/// </returns>
public void MuteBUC()


/// <summary>
/// Unmutes the BUC
/// </summary>
/// <returns>
/// Void
/// </returns>
public void UnMuteBUC()


/// <summary>
/// Gets the BUC Mute state, checks for Mute Status value in the device
/// </summary>
/// <returns>
/// bool - A boolean representing if the device is muted. True if the device is muted.
/// </returns>
public bool GetBUCMuteState()


/// <summary>
/// Gets all the states from the getmute command
/// </summary>
/// <returns>
/// bool[] - An array representing the all of the states as bool
/// </returns>
public bool[] GetBUCMuteStateAll()


/// <summary>
/// Set port name of serial port, default COM1
/// </summary>
/// <param name="_portName">String - The name of serial port</param>
/// <returns>
/// String - The updated port name as string
/// </returns>
public String SetPortName(String _portName="COM1")


/// <summary>
/// Get port name of serial port
/// </summary>
/// <returns>
/// String - The port name as string
/// </returns>
public String GetPortName()


/// <summary>
/// Set baud rate of serial port, default 9600
/// </summary>
/// <param name="_baudRate">int - The baud rate</param>
/// <returns>
/// int - The updated baud rate as int
/// </returns>
public int SetPortBaudRate(int _baudRate=9600)


/// <summary>
/// get baud rate of serial port
/// </summary>
/// <returns>
/// int - The baud rate as int
/// </returns>
public int GetPortBaudRate()


/// <summary>
/// Set parity of serial port, default 0
/// </summary>
/// <param name="_parity">String - The Parity, ranges from 0~4</param>
/// <returns>
/// int - The updated parity as Parity
/// </returns>
public Parity SetPortParity(String _parity="0")


/// <summary>
/// Get parity of serial port
/// </summary>
/// <returns>
/// int - The parity as Parity
/// </returns>
public Parity GetPortParity()


/// <summary>
/// Set data bits of serial port, default 8
/// </summary>
/// <param name="_dataBits">int - The data bits, ranges from 5~8</param>
/// <returns>
/// int - The updated data bits as int
/// </returns>
public int SetPortDataBits(int _dataBits=8)


/// <summary>
/// Get data bits of serial port
/// </summary>
/// <returns>
/// int - The data bits as int
/// </returns>
public int GetPortDataBits()


/// <summary>
/// Set Stop Bits of serial port, default 1
/// </summary>
/// <param name="_stopBits">String - The stop bits, ranges from 1~3</param>
/// <returns>
/// int - The updated stop bits as int
/// </returns>
public StopBits SetPortStopBits(String _stopBits="1")


/// <summary>
/// Get Stop Bits of serial port
/// </summary>
/// <returns>
/// int - The stop bits as int
/// </returns>
public StopBits GetPortStopBits()


/// <summary>
/// Set Handshake of serial port, default 0
/// </summary>
/// <param name="_handshake">String - The hand shake</param>
/// <returns>
/// String - The updated handshake
/// </returns>
public Handshake SetPortHandshake(String _handshake="0")


/// <summary>
/// Get Handshake of serial port, default 0
/// </summary>
/// <returns>
/// String - The handshake
/// </returns>
public Handshake GetPortHandshake()
